{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/Activity.service.ts","webpack:///src/app/services/Message.service.ts","webpack:///src/app/views/activities/activities.component.ts","webpack:///src/app/views/activities/activities.component.html","webpack:///src/app/views/messages/messages.component.ts","webpack:///src/app/views/messages/messages.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ActivityService","http","messageService","activitiesUrl","httpOptions","headers","get","pipe","_","log","handleError","term","trim","x","length","activity","post","newActivity","url","put","operation","result","error","console","message","add","providedIn","MessageService","messages","push","ActivitiesComponent","activityService","getActivities","subscribe","activities","filter","a","deleteActivity","MessagesComponent","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMC,MAAM,GAAW,CACvB;AAAEC,UAAI,EAAE,eAAR;AAAyBC,eAAS,EAAE;AAApC,KADuB,CAAvB;;QAQaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBJ,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBG,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBJ,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACb7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaQ,Y,GANb;AAAA;;AAOE,WAAAC,KAAA,GAAQ,oBAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,gD;AAAA;AAAA;ACTzB;;AAAI;;AAAS;;AACb;;AACE;;AAA+B;;AAAU;;AAC3C;;AACA;;AACA;;;;AALI;;AAAA;;;;;;;;;sEDSSA,Y,EAAY;cANxB,uDAMwB;eANd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAMc,Q;;;;;;;;;;;;;;;;;;AETzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA2BaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBANJ,CACP,uEADO,EAEP,qEAFO,EAGV,0DAHU,EAIP,oEAJO,CAMI;;;;0HAGFA,S,EAAS;AAAA,uBAblB,2DAakB,EAZrB,0FAYqB,EAXlB,oFAWkB;AAXD,kBAGjB,uEAHiB,EAIjB,qEAJiB,EAKpB,0DALoB,EAMjB,oEANiB;AAWC,O;AALF,K;;;;;sEAKPA,S,EAAS;cAfrB,sDAeqB;eAfZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEf,0FAFe,EAGZ,oFAHY,CADN;AAMRP,iBAAO,EAAE,CACP,uEADO,EAEP,qEAFO,EAGV,0DAHU,EAIP,oEAJO,CAND;AAYRQ,mBAAS,EAAE,EAZH;AAaRC,mBAAS,EAAE,CAAC,2DAAD;AAbH,S;AAeY,Q;;;;;;;;;;;;;;;;;;AC3BtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,e;AAQX,+BACUC,IADV,EAEUC,cAFV,EAE0C;AAAA;;AADhC,aAAAD,IAAA,GAAAA,IAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AARF,aAAAC,aAAA,GAAgB,aAAhB,CAQkC,CARF;;AAExC,aAAAC,WAAA,GAAc;AACZC,iBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,4BAAgB;AAAlB,WAAhB;AADG,SAAd;AAM6C;AAE7C;;;;;wCACa;AAAA;;AACX,iBAAO,KAAKJ,IAAL,CAAUK,GAAV,CAA0B,KAAKH,aAA/B,EACJI,IADI,CAEH,2DAAI,UAAAC,CAAC;AAAA,mBAAI,KAAI,CAACC,GAAL,CAAS,oBAAT,CAAJ;AAAA,WAAL,CAFG,EAGH,kEAAW,KAAKC,WAAL,CAA6B,eAA7B,EAA8C,EAA9C,CAAX,CAHG,CAAP;AAKD;AAEA;;;;yCACgBC,I,EAAY;AAAA;;AAC3B,cAAI,CAACA,IAAI,CAACC,IAAL,EAAL,EAAkB;AAChB;AACA,mBAAO,gDAAG,EAAH,CAAP;AACD;;AACD,iBAAO,KAAKX,IAAL,CAAUK,GAAV,WAA6B,KAAKH,aAAlC,oBAAyDQ,IAAzD,GAAiEJ,IAAjE,CACL,2DAAI,UAAAM,CAAC;AAAA,mBAAIA,CAAC,CAACC,MAAF,GACN,MAAI,CAACL,GAAL,uCAAuCE,IAAvC,QADM,GAEN,MAAI,CAACF,GAAL,oCAAoCE,IAApC,QAFE;AAAA,WAAL,CADK,EAIL,kEAAW,KAAKD,WAAL,CAA6B,kBAA7B,EAAiD,EAAjD,CAAX,CAJK,CAAP;AAMD,S,CAED;;AAEA;;;;oCACYK,Q,EAAkB;AAAA;;AAC5B,iBAAO,KAAKd,IAAL,CAAUe,IAAV,CAAyB,KAAKb,aAA9B,EAA6CY,QAA7C,EAAuD,KAAKX,WAA5D,EAAyEG,IAAzE,CACL,2DAAI,UAACU,WAAD;AAAA,mBAA2B,MAAI,CAACR,GAAL,gCAAiCQ,WAAW,CAACjC,EAA7C,EAA3B;AAAA,WAAJ,CADK,EAEL,kEAAW,KAAK0B,WAAL,CAA2B,aAA3B,CAAX,CAFK,CAAP;AAID;AAED;;;;uCACeK,Q,EAA2B;AAAA;;AACxC,cAAM/B,EAAE,GAAG,OAAO+B,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CA,QAAQ,CAAC/B,EAA9D;AACA,cAAMkC,GAAG,aAAM,KAAKf,aAAX,cAA4BnB,EAA5B,CAAT;AAEA,iBAAO,KAAKiB,IAAL,WAA2BiB,GAA3B,EAAgC,KAAKd,WAArC,EAAkDG,IAAlD,CACL,2DAAI,UAAAC,CAAC;AAAA,mBAAI,MAAI,CAACC,GAAL,+BAAgCzB,EAAhC,EAAJ;AAAA,WAAL,CADK,EAEL,kEAAW,KAAK0B,WAAL,CAA2B,gBAA3B,CAAX,CAFK,CAAP;AAID;AAED;;;;uCACeK,Q,EAAkB;AAAA;;AAC/B,iBAAO,KAAKd,IAAL,CAAUkB,GAAV,CAAc,KAAKhB,aAAnB,EAAkCY,QAAlC,EAA4C,KAAKX,WAAjD,EAA8DG,IAA9D,CACL,2DAAI,UAAAC,CAAC;AAAA,mBAAI,MAAI,CAACC,GAAL,+BAAgCM,QAAQ,CAAC/B,EAAzC,EAAJ;AAAA,WAAL,CADK,EAEL,kEAAW,KAAK0B,WAAL,CAAsB,gBAAtB,CAAX,CAFK,CAAP;AAID;AAED;;;;;;;;;sCAM4D;AAAA;;AAAA,cAArCU,SAAqC,uEAAzB,WAAyB;AAAA,cAAZC,MAAY;AAC1D,iBAAO,UAACC,KAAD,EAA+B;AAEpC;AACAC,mBAAO,CAACD,KAAR,CAAcA,KAAd,EAHoC,CAGd;AAEtB;;AACA,kBAAI,CAACb,GAAL,WAAYW,SAAZ,sBAAiCE,KAAK,CAACE,OAAvC,GANoC,CAQpC;;;AACA,mBAAO,gDAAGH,MAAH,CAAP;AACD,WAVD;AAWD;AAED;;;;4BACYG,O,EAAiB;AAC3B,eAAKtB,cAAL,CAAoBuB,GAApB,4BAA4CD,OAA5C;AACD;;;;;;;uBAvFUxB,e,EAAe,uH,EAAA,uH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBADF;;;;;sEACbA,e,EAAe;cAD3B,wDAC2B;eADhB;AAAE0B,oBAAU,EAAE;AAAd,S;AACgB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACV5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGaC,c;AADb;AAAA;;AAEE,aAAAC,QAAA,GAAqB,EAArB;AASD;;;;4BAPKJ,O,EAAiB;AACnB,eAAKI,QAAL,CAAcC,IAAd,CAAmBL,OAAnB;AACD;;;gCAEO;AACN,eAAKI,QAAL,GAAgB,EAAhB;AACD;;;;;;;uBATUD,c;AAAc,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBADD;;;;;sEACbA,c,EAAc;cAD1B,wDAC0B;eADf;AAAED,oBAAU,EAAE;AAAd,S;AACe,Q;;;;;;;;;;;;;;;;;;ACH3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACaE;;AACE;;AACE;;AAAoB;;AAAe;;AAAQ;;AAC7C;;AAGF;;;;;;AALK;;AAAA;;AACmB;;AAAA;;AAAuB;;AAAA;;;;QDLpCI,mB;AAGX,mCAAoBC,eAApB,EAAsD;AAAA;;AAAlC,aAAAA,eAAA,GAAAA,eAAA;AAAqC;;;;mCAE9C;AACT,eAAKC,aAAL;AACD;;;wCAEY;AAAA;;AACX,eAAKD,eAAL,CAAqBC,aAArB,GACCC,SADD,CACW,UAAAC,UAAU;AAAA,mBAAI,MAAI,CAACA,UAAL,GAAkBA,UAAtB;AAAA,WADrB;AAED;;;gCAEMnB,Q,EAAkB;AACvB,eAAKmB,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,MAAhB,CAAuB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,KAAKrB,QAAV;AAAA,WAAxB,CAAlB;AACA,eAAKgB,eAAL,CAAqBM,cAArB,CAAoCtB,QAApC,EAA8CkB,SAA9C;AACD;;;;;;;uBAjBUH,mB,EAAmB,2I;AAAA,K;;;YAAnBA,mB;AAAmB,qC;AAAA,c;AAAA,a;AAAA,iH;AAAA;AAAA;ACVhC;;AAAI;;AAAS;;AAEb;;AACE;;AAAO;;AACL;;AACF;;AAKF;;AAEA;;AACE;;AAOF;;;;AAPM;;AAAA;;;;;;;;;sEDHOA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTrC,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;AEVhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKE;;AAAsD;;AAAY;;;;;;AAAZ;;AAAA;;;;;;;;AALxD;;AAEE;;AAAI;;AAAQ;;AACZ;;AACQ;AAAA;;AAAA;;AAAA,iBAAS,OAAAO,cAAA,QAAT;AAA+B,SAA/B;;AAAiC;;AAAK;;AAC9C;;AAEF;;;;;;AAFO;;AAAA;;;;QDGMoC,iB;AAEX,iCAAmBpC,cAAnB,EAAmD;AAAA;;AAAhC,aAAAA,cAAA,GAAAA,cAAA;AAAkC;;;;mCAE1C,CACV;;;;;;;uBALUoC,iB,EAAiB,yI;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,c;AAAA,a;AAAA,8E;AAAA;AAAA;ACR9B;;;;AAAK;;;;;;;;;sEDQQA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT7C,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;AER9B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAM4C,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAInB,OAAO,CAACD,KAAR,CAAcoB,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ActivitiesComponent }      from './views/activities/activities.component';\n\nconst routes: Routes = [\n{ path: 'allActivities', component: ActivitiesComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  title = 'Tour of Activities';\n}\n\n","<h1>{{title}}</h1>\n<nav>\n  <a routerLink=\"/allActivities\">Activities</a>\n</nav>\n<router-outlet></router-outlet>\n<app-messages></app-messages>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule }    from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n \nimport { AppRoutingModule }     from './app-routing.module'; \n \nimport { AppComponent } from './app.component';\nimport { ActivitiesComponent }      from './views/activities/activities.component';\nimport { MessagesComponent }    from './views/messages/messages.component';\n\n \n@NgModule({\n  declarations: [\n    AppComponent,\n\tActivitiesComponent,\n    MessagesComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n\tFormsModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Activity } from '../models/Activity';\r\nimport { MessageService } from './Message.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ActivityService {\r\n\r\n  private activitiesUrl = '/activities';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private messageService: MessageService) { }\r\n\r\n  /** GET activities */\r\n  getActivities(): Observable<Activity[]> {\r\n    return this.http.get<Activity[]>(this.activitiesUrl)\r\n      .pipe(\r\n        tap(_ => this.log('fetched activities')),\r\n        catchError(this.handleError<Activity[]>('getActivities', []))\r\n      );\r\n  }\r\n\r\n   /* GET activities whose name contains search term */\r\n  searchActivities(term: string): Observable<Activity[]> {\r\n    if (!term.trim()) {\r\n      // if not search term, return empty activity array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Activity[]>(`${this.activitiesUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n         this.log(`found activities matching \"${term}\"`) :\r\n         this.log(`no activities matching \"${term}\"`)),\r\n      catchError(this.handleError<Activity[]>('searchActivities', []))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new activity to the server */\r\n  addActivity(activity: Activity): Observable<Activity> {\r\n    return this.http.post<Activity>(this.activitiesUrl, activity, this.httpOptions).pipe(\r\n      tap((newActivity: Activity) => this.log(`added activity w/ id=${newActivity.id}`)),\r\n      catchError(this.handleError<Activity>('addActivity'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the Activity */\r\n  deleteActivity(activity: Activity | number): Observable<Activity> {\r\n    const id = typeof activity === 'number' ? activity : activity.id;\r\n    const url = `${this.activitiesUrl}/${id}`;\r\n\r\n    return this.http.delete<Activity>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`deleted activity id=${id}`)),\r\n      catchError(this.handleError<Activity>('deleteActivity'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the activity on the server */\r\n  updateActivity(activity: Activity): Observable<any> {\r\n    return this.http.put(this.activitiesUrl, activity, this.httpOptions).pipe(\r\n      tap(_ => this.log(`updated activity id=${activity.id}`)),\r\n      catchError(this.handleError<any>('updateActivity'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a ActivityService message with the MessageService */\r\n  private log(message: string) {\r\n    this.messageService.add(`ActivityService: ${message}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Activity } from '../../models/Activity';\nimport { ActivityService } from '../../services/Activity.service';\n\n@Component({\n  selector: 'app-activities',\n  templateUrl: './activities.component.html',\n  styleUrls: ['./activities.component.css']\n})\nexport class ActivitiesComponent implements OnInit {\n  activities: Activity[];\n\n  constructor(private activityService: ActivityService) { }\n\n  ngOnInit() {\n    this.getActivities();\n  }\n\n  getActivities(): void {\n    this.activityService.getActivities()\n    .subscribe(activities => this.activities = activities);\n  }\n\n  delete(activity: Activity): void {\n    this.activities = this.activities.filter(a => a !== activity);\n    this.activityService.deleteActivity(activity).subscribe();\n  }\n\n}\n","<h2>My Heroes</h2>\n\n<div>\n  <label>Activity name:\n    <input #activityName />\n  </label>\n  <!-- (click) passes input value to add() and then clears the input \n  <button (click)=\"add(activityName.value); activityName.value=''\">\n    add\n  </button>-->\n</div>\n\n<ul class=\"activities\">\n  <li *ngFor=\"let activity of activities\">\n    <a routerLink=\"/detail/{{activity.id}}\">\n      <span class=\"badge\">{{activity.id}}</span> {{activity.name}}\n    </a>\n    <!--<button class=\"delete\" title=\"delete activity\"\n      (click)=\"delete(activity)\">x</button>-->\n  </li>\n</ul>\n","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../../services/Message.service';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n\n  constructor(public messageService: MessageService) {}\n\n  ngOnInit() {\n  }\n\n}\n","<div *ngIf=\"messageService.messages.length\">\n\n  <h2>Messages</h2>\n  <button class=\"clear\"\n          (click)=\"messageService.clear()\">clear</button>\n  <div *ngFor='let message of messageService.messages'> {{message}} </div>\n\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}